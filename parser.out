Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> function_list
Rule 1     function_list -> function function_list
Rule 2     function_list -> empty
Rule 3     function -> TYPE VARIABLE ( arguments ) { body }
Rule 4     arguments -> TYPE variable_or_pointer
Rule 5     arguments -> TYPE variable_or_pointer , arguments
Rule 6     arguments -> TYPE
Rule 7     arguments -> TYPE , arguments
Rule 8     body -> line body
Rule 9     body -> empty
Rule 10    line -> declaration
Rule 11    line -> assignment
Rule 12    line -> if_clause
Rule 13    line -> for_loop
Rule 14    line -> expr_line
Rule 15    line -> return_expr
Rule 16    line -> printf_expr
Rule 17    declaration -> TYPE variable_list ;
Rule 18    variable_list -> variable_or_pointer
Rule 19    variable_list -> variable_or_pointer , variable_list
Rule 20    assignment -> variable_or_pointer = expr_1 ;
Rule 21    assignment -> variable_or_pointer = & VARIABLE ;
Rule 22    return_expr -> RETURN expr_1 ;
Rule 23    return_expr -> RETURN ;
Rule 24    expr_line -> expr_1 ;
Rule 25    printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ;
Rule 26    printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ;
Rule 27    variable_or_pointer -> * VARIABLE
Rule 28    variable_or_pointer -> VARIABLE
Rule 29    expr_1 -> expr_2 > expr_1
Rule 30    expr_1 -> expr_2 < expr_1
Rule 31    expr_1 -> expr_2
Rule 32    expr_2 -> expr_3 PLUS expr_2
Rule 33    expr_2 -> expr_3 - expr_2
Rule 34    expr_2 -> expr_3
Rule 35    expr_3 -> expr_4 * expr_3
Rule 36    expr_3 -> expr_4 / expr_3
Rule 37    expr_3 -> expr_4
Rule 38    expr_4 -> - expr_5
Rule 39    expr_4 -> expr_5
Rule 40    expr_5 -> variable_or_pointer INCR
Rule 41    expr_5 -> expr_6
Rule 42    expr_6 -> INTEGER
Rule 43    expr_6 -> variable_or_pointer
Rule 44    expr_6 -> function_call
Rule 45    expr_6 -> array
Rule 46    expr_6 -> ( expr_1 )
Rule 47    if_clause -> IF ( expr_1 ) { body }
Rule 48    for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body }
Rule 49    function_call -> VARIABLE ( arguments_call )
Rule 50    arguments_call -> expr_1
Rule 51    arguments_call -> expr_1 , arguments_call
Rule 52    array -> VARIABLE [ expr_1 ]
Rule 53    empty -> <empty>

Terminals, with rules where they appear

"                    : 26 26
&                    : 21
(                    : 3 25 26 46 47 48 49
)                    : 3 25 26 46 47 48 49
*                    : 27 35
,                    : 5 7 19 25 26 51
-                    : 33 38
/                    : 36
;                    : 17 20 21 22 23 24 25 26 48
<                    : 30
=                    : 20 21
>                    : 29
DIGIT_STRING         : 25
FLOAT_STRING         : 26
FOR                  : 48
IF                   : 47
INCR                 : 40
INTEGER              : 42
PLUS                 : 32
PRINTF               : 25 26
RETURN               : 22 23
TYPE                 : 3 4 5 6 7 17
VARIABLE             : 3 21 27 28 49 52
[                    : 52
]                    : 52
error                : 
{                    : 3 47 48
}                    : 3 47 48

Nonterminals, with rules where they appear

arguments            : 3 5 7
arguments_call       : 49 51
array                : 45
assignment           : 11 48
body                 : 3 8 47 48
declaration          : 10
empty                : 2 9
expr_1               : 20 22 24 25 26 29 30 46 47 48 48 50 51 52
expr_2               : 29 30 31 32 33
expr_3               : 32 33 34 35 36
expr_4               : 35 36 37
expr_5               : 38 39
expr_6               : 41
expr_line            : 14
for_loop             : 13
function             : 1
function_call        : 44
function_list        : 1 0
if_clause            : 12
line                 : 8
printf_expr          : 16
return_expr          : 15
variable_list        : 17 19
variable_or_pointer  : 4 5 18 19 20 21 40 43

Parsing method: LALR

state 0

    (0) S' -> . function_list
    (1) function_list -> . function function_list
    (2) function_list -> . empty
    (3) function -> . TYPE VARIABLE ( arguments ) { body }
    (53) empty -> .

    TYPE            shift and go to state 4
    $end            reduce using rule 53 (empty -> .)

    function_list                  shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> function_list .



state 2

    (1) function_list -> function . function_list
    (1) function_list -> . function function_list
    (2) function_list -> . empty
    (3) function -> . TYPE VARIABLE ( arguments ) { body }
    (53) empty -> .

    TYPE            shift and go to state 4
    $end            reduce using rule 53 (empty -> .)

    function                       shift and go to state 2
    function_list                  shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) function_list -> empty .

    $end            reduce using rule 2 (function_list -> empty .)


state 4

    (3) function -> TYPE . VARIABLE ( arguments ) { body }

    VARIABLE        shift and go to state 6


state 5

    (1) function_list -> function function_list .

    $end            reduce using rule 1 (function_list -> function function_list .)


state 6

    (3) function -> TYPE VARIABLE . ( arguments ) { body }

    (               shift and go to state 7


state 7

    (3) function -> TYPE VARIABLE ( . arguments ) { body }
    (4) arguments -> . TYPE variable_or_pointer
    (5) arguments -> . TYPE variable_or_pointer , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 9

state 8

    (4) arguments -> TYPE . variable_or_pointer
    (5) arguments -> TYPE . variable_or_pointer , arguments
    (6) arguments -> TYPE .
    (7) arguments -> TYPE . , arguments
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE

    )               reduce using rule 6 (arguments -> TYPE .)
    ,               shift and go to state 11
    *               shift and go to state 12
    VARIABLE        shift and go to state 13

    variable_or_pointer            shift and go to state 10

state 9

    (3) function -> TYPE VARIABLE ( arguments . ) { body }

    )               shift and go to state 14


state 10

    (4) arguments -> TYPE variable_or_pointer .
    (5) arguments -> TYPE variable_or_pointer . , arguments

    )               reduce using rule 4 (arguments -> TYPE variable_or_pointer .)
    ,               shift and go to state 15


state 11

    (7) arguments -> TYPE , . arguments
    (4) arguments -> . TYPE variable_or_pointer
    (5) arguments -> . TYPE variable_or_pointer , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 16

state 12

    (27) variable_or_pointer -> * . VARIABLE

    VARIABLE        shift and go to state 17


state 13

    (28) variable_or_pointer -> VARIABLE .

    ,               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    )               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    ;               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    =               reduce using rule 28 (variable_or_pointer -> VARIABLE .)


state 14

    (3) function -> TYPE VARIABLE ( arguments ) . { body }

    {               shift and go to state 18


state 15

    (5) arguments -> TYPE variable_or_pointer , . arguments
    (4) arguments -> . TYPE variable_or_pointer
    (5) arguments -> . TYPE variable_or_pointer , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 19

state 16

    (7) arguments -> TYPE , arguments .

    )               reduce using rule 7 (arguments -> TYPE , arguments .)


state 17

    (27) variable_or_pointer -> * VARIABLE .

    ,               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    )               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    =               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    INCR            reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    *               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    /               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    PLUS            reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    -               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    >               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    <               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    ;               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)
    ]               reduce using rule 27 (variable_or_pointer -> * VARIABLE .)


state 18

    (3) function -> TYPE VARIABLE ( arguments ) { . body }
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (13) line -> . for_loop
    (14) line -> . expr_line
    (15) line -> . return_expr
    (16) line -> . printf_expr
    (53) empty -> .
    (17) declaration -> . TYPE variable_list ;
    (20) assignment -> . variable_or_pointer = expr_1 ;
    (21) assignment -> . variable_or_pointer = & VARIABLE ;
    (47) if_clause -> . IF ( expr_1 ) { body }
    (48) for_loop -> . FOR ( assignment expr_1 ; expr_1 ) { body }
    (24) expr_line -> . expr_1 ;
    (22) return_expr -> . RETURN expr_1 ;
    (23) return_expr -> . RETURN ;
    (25) printf_expr -> . PRINTF ( DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> . PRINTF ( " FLOAT_STRING " , expr_1 ) ;
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    }               reduce using rule 53 (empty -> .)
    TYPE            shift and go to state 20
    IF              shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 37
    PRINTF          shift and go to state 38
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    -               shift and go to state 41
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    body                           shift and go to state 23
    line                           shift and go to state 24
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    assignment                     shift and go to state 27
    if_clause                      shift and go to state 28
    for_loop                       shift and go to state 29
    expr_line                      shift and go to state 30
    return_expr                    shift and go to state 31
    printf_expr                    shift and go to state 32
    variable_or_pointer            shift and go to state 33
    expr_1                         shift and go to state 34
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 19

    (5) arguments -> TYPE variable_or_pointer , arguments .

    )               reduce using rule 5 (arguments -> TYPE variable_or_pointer , arguments .)


state 20

    (17) declaration -> TYPE . variable_list ;
    (18) variable_list -> . variable_or_pointer
    (19) variable_list -> . variable_or_pointer , variable_list
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE

    *               shift and go to state 12
    VARIABLE        shift and go to state 13

    variable_list                  shift and go to state 48
    variable_or_pointer            shift and go to state 49

state 21

    (28) variable_or_pointer -> VARIABLE .
    (49) function_call -> VARIABLE . ( arguments_call )
    (52) array -> VARIABLE . [ expr_1 ]

    =               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    INCR            reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    *               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    /               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    PLUS            reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    -               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    >               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    <               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    ;               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    )               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    ,               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    ]               reduce using rule 28 (variable_or_pointer -> VARIABLE .)
    (               shift and go to state 50
    [               shift and go to state 51


state 22

    (46) expr_6 -> ( . expr_1 )
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 52
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 23

    (3) function -> TYPE VARIABLE ( arguments ) { body . }

    }               shift and go to state 54


state 24

    (8) body -> line . body
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (13) line -> . for_loop
    (14) line -> . expr_line
    (15) line -> . return_expr
    (16) line -> . printf_expr
    (53) empty -> .
    (17) declaration -> . TYPE variable_list ;
    (20) assignment -> . variable_or_pointer = expr_1 ;
    (21) assignment -> . variable_or_pointer = & VARIABLE ;
    (47) if_clause -> . IF ( expr_1 ) { body }
    (48) for_loop -> . FOR ( assignment expr_1 ; expr_1 ) { body }
    (24) expr_line -> . expr_1 ;
    (22) return_expr -> . RETURN expr_1 ;
    (23) return_expr -> . RETURN ;
    (25) printf_expr -> . PRINTF ( DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> . PRINTF ( " FLOAT_STRING " , expr_1 ) ;
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    }               reduce using rule 53 (empty -> .)
    TYPE            shift and go to state 20
    IF              shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 37
    PRINTF          shift and go to state 38
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    -               shift and go to state 41
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    line                           shift and go to state 24
    body                           shift and go to state 55
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    assignment                     shift and go to state 27
    if_clause                      shift and go to state 28
    for_loop                       shift and go to state 29
    expr_line                      shift and go to state 30
    return_expr                    shift and go to state 31
    printf_expr                    shift and go to state 32
    variable_or_pointer            shift and go to state 33
    expr_1                         shift and go to state 34
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 25

    (9) body -> empty .

    }               reduce using rule 9 (body -> empty .)


state 26

    (10) line -> declaration .

    TYPE            reduce using rule 10 (line -> declaration .)
    IF              reduce using rule 10 (line -> declaration .)
    FOR             reduce using rule 10 (line -> declaration .)
    RETURN          reduce using rule 10 (line -> declaration .)
    PRINTF          reduce using rule 10 (line -> declaration .)
    *               reduce using rule 10 (line -> declaration .)
    VARIABLE        reduce using rule 10 (line -> declaration .)
    -               reduce using rule 10 (line -> declaration .)
    INTEGER         reduce using rule 10 (line -> declaration .)
    (               reduce using rule 10 (line -> declaration .)
    }               reduce using rule 10 (line -> declaration .)


state 27

    (11) line -> assignment .

    TYPE            reduce using rule 11 (line -> assignment .)
    IF              reduce using rule 11 (line -> assignment .)
    FOR             reduce using rule 11 (line -> assignment .)
    RETURN          reduce using rule 11 (line -> assignment .)
    PRINTF          reduce using rule 11 (line -> assignment .)
    *               reduce using rule 11 (line -> assignment .)
    VARIABLE        reduce using rule 11 (line -> assignment .)
    -               reduce using rule 11 (line -> assignment .)
    INTEGER         reduce using rule 11 (line -> assignment .)
    (               reduce using rule 11 (line -> assignment .)
    }               reduce using rule 11 (line -> assignment .)


state 28

    (12) line -> if_clause .

    TYPE            reduce using rule 12 (line -> if_clause .)
    IF              reduce using rule 12 (line -> if_clause .)
    FOR             reduce using rule 12 (line -> if_clause .)
    RETURN          reduce using rule 12 (line -> if_clause .)
    PRINTF          reduce using rule 12 (line -> if_clause .)
    *               reduce using rule 12 (line -> if_clause .)
    VARIABLE        reduce using rule 12 (line -> if_clause .)
    -               reduce using rule 12 (line -> if_clause .)
    INTEGER         reduce using rule 12 (line -> if_clause .)
    (               reduce using rule 12 (line -> if_clause .)
    }               reduce using rule 12 (line -> if_clause .)


state 29

    (13) line -> for_loop .

    TYPE            reduce using rule 13 (line -> for_loop .)
    IF              reduce using rule 13 (line -> for_loop .)
    FOR             reduce using rule 13 (line -> for_loop .)
    RETURN          reduce using rule 13 (line -> for_loop .)
    PRINTF          reduce using rule 13 (line -> for_loop .)
    *               reduce using rule 13 (line -> for_loop .)
    VARIABLE        reduce using rule 13 (line -> for_loop .)
    -               reduce using rule 13 (line -> for_loop .)
    INTEGER         reduce using rule 13 (line -> for_loop .)
    (               reduce using rule 13 (line -> for_loop .)
    }               reduce using rule 13 (line -> for_loop .)


state 30

    (14) line -> expr_line .

    TYPE            reduce using rule 14 (line -> expr_line .)
    IF              reduce using rule 14 (line -> expr_line .)
    FOR             reduce using rule 14 (line -> expr_line .)
    RETURN          reduce using rule 14 (line -> expr_line .)
    PRINTF          reduce using rule 14 (line -> expr_line .)
    *               reduce using rule 14 (line -> expr_line .)
    VARIABLE        reduce using rule 14 (line -> expr_line .)
    -               reduce using rule 14 (line -> expr_line .)
    INTEGER         reduce using rule 14 (line -> expr_line .)
    (               reduce using rule 14 (line -> expr_line .)
    }               reduce using rule 14 (line -> expr_line .)


state 31

    (15) line -> return_expr .

    TYPE            reduce using rule 15 (line -> return_expr .)
    IF              reduce using rule 15 (line -> return_expr .)
    FOR             reduce using rule 15 (line -> return_expr .)
    RETURN          reduce using rule 15 (line -> return_expr .)
    PRINTF          reduce using rule 15 (line -> return_expr .)
    *               reduce using rule 15 (line -> return_expr .)
    VARIABLE        reduce using rule 15 (line -> return_expr .)
    -               reduce using rule 15 (line -> return_expr .)
    INTEGER         reduce using rule 15 (line -> return_expr .)
    (               reduce using rule 15 (line -> return_expr .)
    }               reduce using rule 15 (line -> return_expr .)


state 32

    (16) line -> printf_expr .

    TYPE            reduce using rule 16 (line -> printf_expr .)
    IF              reduce using rule 16 (line -> printf_expr .)
    FOR             reduce using rule 16 (line -> printf_expr .)
    RETURN          reduce using rule 16 (line -> printf_expr .)
    PRINTF          reduce using rule 16 (line -> printf_expr .)
    *               reduce using rule 16 (line -> printf_expr .)
    VARIABLE        reduce using rule 16 (line -> printf_expr .)
    -               reduce using rule 16 (line -> printf_expr .)
    INTEGER         reduce using rule 16 (line -> printf_expr .)
    (               reduce using rule 16 (line -> printf_expr .)
    }               reduce using rule 16 (line -> printf_expr .)


state 33

    (20) assignment -> variable_or_pointer . = expr_1 ;
    (21) assignment -> variable_or_pointer . = & VARIABLE ;
    (40) expr_5 -> variable_or_pointer . INCR
    (43) expr_6 -> variable_or_pointer .

    =               shift and go to state 56
    INCR            shift and go to state 57
    *               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    /               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    PLUS            reduce using rule 43 (expr_6 -> variable_or_pointer .)
    -               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    >               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    <               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    ;               reduce using rule 43 (expr_6 -> variable_or_pointer .)


state 34

    (24) expr_line -> expr_1 . ;

    ;               shift and go to state 58


state 35

    (47) if_clause -> IF . ( expr_1 ) { body }

    (               shift and go to state 59


state 36

    (48) for_loop -> FOR . ( assignment expr_1 ; expr_1 ) { body }

    (               shift and go to state 60


state 37

    (22) return_expr -> RETURN . expr_1 ;
    (23) return_expr -> RETURN . ;
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    ;               shift and go to state 62
    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 61
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 38

    (25) printf_expr -> PRINTF . ( DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> PRINTF . ( " FLOAT_STRING " , expr_1 ) ;

    (               shift and go to state 63


state 39

    (29) expr_1 -> expr_2 . > expr_1
    (30) expr_1 -> expr_2 . < expr_1
    (31) expr_1 -> expr_2 .

    >               shift and go to state 64
    <               shift and go to state 65
    ;               reduce using rule 31 (expr_1 -> expr_2 .)
    )               reduce using rule 31 (expr_1 -> expr_2 .)
    ,               reduce using rule 31 (expr_1 -> expr_2 .)
    ]               reduce using rule 31 (expr_1 -> expr_2 .)


state 40

    (32) expr_2 -> expr_3 . PLUS expr_2
    (33) expr_2 -> expr_3 . - expr_2
    (34) expr_2 -> expr_3 .

    PLUS            shift and go to state 66
    -               shift and go to state 67
    >               reduce using rule 34 (expr_2 -> expr_3 .)
    <               reduce using rule 34 (expr_2 -> expr_3 .)
    ;               reduce using rule 34 (expr_2 -> expr_3 .)
    )               reduce using rule 34 (expr_2 -> expr_3 .)
    ,               reduce using rule 34 (expr_2 -> expr_3 .)
    ]               reduce using rule 34 (expr_2 -> expr_3 .)


state 41

    (38) expr_4 -> - . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_5                         shift and go to state 68
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 42

    (35) expr_3 -> expr_4 . * expr_3
    (36) expr_3 -> expr_4 . / expr_3
    (37) expr_3 -> expr_4 .

    *               shift and go to state 69
    /               shift and go to state 70
    PLUS            reduce using rule 37 (expr_3 -> expr_4 .)
    -               reduce using rule 37 (expr_3 -> expr_4 .)
    >               reduce using rule 37 (expr_3 -> expr_4 .)
    <               reduce using rule 37 (expr_3 -> expr_4 .)
    ;               reduce using rule 37 (expr_3 -> expr_4 .)
    )               reduce using rule 37 (expr_3 -> expr_4 .)
    ,               reduce using rule 37 (expr_3 -> expr_4 .)
    ]               reduce using rule 37 (expr_3 -> expr_4 .)


state 43

    (39) expr_4 -> expr_5 .

    *               reduce using rule 39 (expr_4 -> expr_5 .)
    /               reduce using rule 39 (expr_4 -> expr_5 .)
    PLUS            reduce using rule 39 (expr_4 -> expr_5 .)
    -               reduce using rule 39 (expr_4 -> expr_5 .)
    >               reduce using rule 39 (expr_4 -> expr_5 .)
    <               reduce using rule 39 (expr_4 -> expr_5 .)
    ;               reduce using rule 39 (expr_4 -> expr_5 .)
    )               reduce using rule 39 (expr_4 -> expr_5 .)
    ,               reduce using rule 39 (expr_4 -> expr_5 .)
    ]               reduce using rule 39 (expr_4 -> expr_5 .)


state 44

    (41) expr_5 -> expr_6 .

    *               reduce using rule 41 (expr_5 -> expr_6 .)
    /               reduce using rule 41 (expr_5 -> expr_6 .)
    PLUS            reduce using rule 41 (expr_5 -> expr_6 .)
    -               reduce using rule 41 (expr_5 -> expr_6 .)
    >               reduce using rule 41 (expr_5 -> expr_6 .)
    <               reduce using rule 41 (expr_5 -> expr_6 .)
    ;               reduce using rule 41 (expr_5 -> expr_6 .)
    )               reduce using rule 41 (expr_5 -> expr_6 .)
    ,               reduce using rule 41 (expr_5 -> expr_6 .)
    ]               reduce using rule 41 (expr_5 -> expr_6 .)


state 45

    (42) expr_6 -> INTEGER .

    *               reduce using rule 42 (expr_6 -> INTEGER .)
    /               reduce using rule 42 (expr_6 -> INTEGER .)
    PLUS            reduce using rule 42 (expr_6 -> INTEGER .)
    -               reduce using rule 42 (expr_6 -> INTEGER .)
    >               reduce using rule 42 (expr_6 -> INTEGER .)
    <               reduce using rule 42 (expr_6 -> INTEGER .)
    ;               reduce using rule 42 (expr_6 -> INTEGER .)
    )               reduce using rule 42 (expr_6 -> INTEGER .)
    ,               reduce using rule 42 (expr_6 -> INTEGER .)
    ]               reduce using rule 42 (expr_6 -> INTEGER .)


state 46

    (44) expr_6 -> function_call .

    *               reduce using rule 44 (expr_6 -> function_call .)
    /               reduce using rule 44 (expr_6 -> function_call .)
    PLUS            reduce using rule 44 (expr_6 -> function_call .)
    -               reduce using rule 44 (expr_6 -> function_call .)
    >               reduce using rule 44 (expr_6 -> function_call .)
    <               reduce using rule 44 (expr_6 -> function_call .)
    ;               reduce using rule 44 (expr_6 -> function_call .)
    )               reduce using rule 44 (expr_6 -> function_call .)
    ,               reduce using rule 44 (expr_6 -> function_call .)
    ]               reduce using rule 44 (expr_6 -> function_call .)


state 47

    (45) expr_6 -> array .

    *               reduce using rule 45 (expr_6 -> array .)
    /               reduce using rule 45 (expr_6 -> array .)
    PLUS            reduce using rule 45 (expr_6 -> array .)
    -               reduce using rule 45 (expr_6 -> array .)
    >               reduce using rule 45 (expr_6 -> array .)
    <               reduce using rule 45 (expr_6 -> array .)
    ;               reduce using rule 45 (expr_6 -> array .)
    )               reduce using rule 45 (expr_6 -> array .)
    ,               reduce using rule 45 (expr_6 -> array .)
    ]               reduce using rule 45 (expr_6 -> array .)


state 48

    (17) declaration -> TYPE variable_list . ;

    ;               shift and go to state 71


state 49

    (18) variable_list -> variable_or_pointer .
    (19) variable_list -> variable_or_pointer . , variable_list

    ;               reduce using rule 18 (variable_list -> variable_or_pointer .)
    ,               shift and go to state 72


state 50

    (49) function_call -> VARIABLE ( . arguments_call )
    (50) arguments_call -> . expr_1
    (51) arguments_call -> . expr_1 , arguments_call
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    arguments_call                 shift and go to state 73
    expr_1                         shift and go to state 74
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 51

    (52) array -> VARIABLE [ . expr_1 ]
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 75
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 52

    (46) expr_6 -> ( expr_1 . )

    )               shift and go to state 76


state 53

    (40) expr_5 -> variable_or_pointer . INCR
    (43) expr_6 -> variable_or_pointer .

    INCR            shift and go to state 57
    *               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    /               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    PLUS            reduce using rule 43 (expr_6 -> variable_or_pointer .)
    -               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    >               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    <               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    )               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    ;               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    ,               reduce using rule 43 (expr_6 -> variable_or_pointer .)
    ]               reduce using rule 43 (expr_6 -> variable_or_pointer .)


state 54

    (3) function -> TYPE VARIABLE ( arguments ) { body } .

    TYPE            reduce using rule 3 (function -> TYPE VARIABLE ( arguments ) { body } .)
    $end            reduce using rule 3 (function -> TYPE VARIABLE ( arguments ) { body } .)


state 55

    (8) body -> line body .

    }               reduce using rule 8 (body -> line body .)


state 56

    (20) assignment -> variable_or_pointer = . expr_1 ;
    (21) assignment -> variable_or_pointer = . & VARIABLE ;
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    &               shift and go to state 78
    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    variable_or_pointer            shift and go to state 53
    expr_1                         shift and go to state 77
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 57

    (40) expr_5 -> variable_or_pointer INCR .

    *               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    /               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    PLUS            reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    -               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    >               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    <               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    ;               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    )               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    ,               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)
    ]               reduce using rule 40 (expr_5 -> variable_or_pointer INCR .)


state 58

    (24) expr_line -> expr_1 ; .

    TYPE            reduce using rule 24 (expr_line -> expr_1 ; .)
    IF              reduce using rule 24 (expr_line -> expr_1 ; .)
    FOR             reduce using rule 24 (expr_line -> expr_1 ; .)
    RETURN          reduce using rule 24 (expr_line -> expr_1 ; .)
    PRINTF          reduce using rule 24 (expr_line -> expr_1 ; .)
    *               reduce using rule 24 (expr_line -> expr_1 ; .)
    VARIABLE        reduce using rule 24 (expr_line -> expr_1 ; .)
    -               reduce using rule 24 (expr_line -> expr_1 ; .)
    INTEGER         reduce using rule 24 (expr_line -> expr_1 ; .)
    (               reduce using rule 24 (expr_line -> expr_1 ; .)
    }               reduce using rule 24 (expr_line -> expr_1 ; .)


state 59

    (47) if_clause -> IF ( . expr_1 ) { body }
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 79
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 60

    (48) for_loop -> FOR ( . assignment expr_1 ; expr_1 ) { body }
    (20) assignment -> . variable_or_pointer = expr_1 ;
    (21) assignment -> . variable_or_pointer = & VARIABLE ;
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE

    *               shift and go to state 12
    VARIABLE        shift and go to state 13

    assignment                     shift and go to state 80
    variable_or_pointer            shift and go to state 81

state 61

    (22) return_expr -> RETURN expr_1 . ;

    ;               shift and go to state 82


state 62

    (23) return_expr -> RETURN ; .

    TYPE            reduce using rule 23 (return_expr -> RETURN ; .)
    IF              reduce using rule 23 (return_expr -> RETURN ; .)
    FOR             reduce using rule 23 (return_expr -> RETURN ; .)
    RETURN          reduce using rule 23 (return_expr -> RETURN ; .)
    PRINTF          reduce using rule 23 (return_expr -> RETURN ; .)
    *               reduce using rule 23 (return_expr -> RETURN ; .)
    VARIABLE        reduce using rule 23 (return_expr -> RETURN ; .)
    -               reduce using rule 23 (return_expr -> RETURN ; .)
    INTEGER         reduce using rule 23 (return_expr -> RETURN ; .)
    (               reduce using rule 23 (return_expr -> RETURN ; .)
    }               reduce using rule 23 (return_expr -> RETURN ; .)


state 63

    (25) printf_expr -> PRINTF ( . DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> PRINTF ( . " FLOAT_STRING " , expr_1 ) ;

    DIGIT_STRING    shift and go to state 83
    "               shift and go to state 84


state 64

    (29) expr_1 -> expr_2 > . expr_1
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_2                         shift and go to state 39
    expr_1                         shift and go to state 85
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 65

    (30) expr_1 -> expr_2 < . expr_1
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_2                         shift and go to state 39
    expr_1                         shift and go to state 86
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 66

    (32) expr_2 -> expr_3 PLUS . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_3                         shift and go to state 40
    expr_2                         shift and go to state 87
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 67

    (33) expr_2 -> expr_3 - . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_3                         shift and go to state 40
    expr_2                         shift and go to state 88
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 68

    (38) expr_4 -> - expr_5 .

    *               reduce using rule 38 (expr_4 -> - expr_5 .)
    /               reduce using rule 38 (expr_4 -> - expr_5 .)
    PLUS            reduce using rule 38 (expr_4 -> - expr_5 .)
    -               reduce using rule 38 (expr_4 -> - expr_5 .)
    >               reduce using rule 38 (expr_4 -> - expr_5 .)
    <               reduce using rule 38 (expr_4 -> - expr_5 .)
    ;               reduce using rule 38 (expr_4 -> - expr_5 .)
    )               reduce using rule 38 (expr_4 -> - expr_5 .)
    ,               reduce using rule 38 (expr_4 -> - expr_5 .)
    ]               reduce using rule 38 (expr_4 -> - expr_5 .)


state 69

    (35) expr_3 -> expr_4 * . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_4                         shift and go to state 42
    expr_3                         shift and go to state 89
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 70

    (36) expr_3 -> expr_4 / . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_4                         shift and go to state 42
    expr_3                         shift and go to state 90
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 71

    (17) declaration -> TYPE variable_list ; .

    TYPE            reduce using rule 17 (declaration -> TYPE variable_list ; .)
    IF              reduce using rule 17 (declaration -> TYPE variable_list ; .)
    FOR             reduce using rule 17 (declaration -> TYPE variable_list ; .)
    RETURN          reduce using rule 17 (declaration -> TYPE variable_list ; .)
    PRINTF          reduce using rule 17 (declaration -> TYPE variable_list ; .)
    *               reduce using rule 17 (declaration -> TYPE variable_list ; .)
    VARIABLE        reduce using rule 17 (declaration -> TYPE variable_list ; .)
    -               reduce using rule 17 (declaration -> TYPE variable_list ; .)
    INTEGER         reduce using rule 17 (declaration -> TYPE variable_list ; .)
    (               reduce using rule 17 (declaration -> TYPE variable_list ; .)
    }               reduce using rule 17 (declaration -> TYPE variable_list ; .)


state 72

    (19) variable_list -> variable_or_pointer , . variable_list
    (18) variable_list -> . variable_or_pointer
    (19) variable_list -> . variable_or_pointer , variable_list
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE

    *               shift and go to state 12
    VARIABLE        shift and go to state 13

    variable_or_pointer            shift and go to state 49
    variable_list                  shift and go to state 91

state 73

    (49) function_call -> VARIABLE ( arguments_call . )

    )               shift and go to state 92


state 74

    (50) arguments_call -> expr_1 .
    (51) arguments_call -> expr_1 . , arguments_call

    )               reduce using rule 50 (arguments_call -> expr_1 .)
    ,               shift and go to state 93


state 75

    (52) array -> VARIABLE [ expr_1 . ]

    ]               shift and go to state 94


state 76

    (46) expr_6 -> ( expr_1 ) .

    *               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    /               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    PLUS            reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    -               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    >               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    <               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    ;               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    )               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    ,               reduce using rule 46 (expr_6 -> ( expr_1 ) .)
    ]               reduce using rule 46 (expr_6 -> ( expr_1 ) .)


state 77

    (20) assignment -> variable_or_pointer = expr_1 . ;

    ;               shift and go to state 95


state 78

    (21) assignment -> variable_or_pointer = & . VARIABLE ;

    VARIABLE        shift and go to state 96


state 79

    (47) if_clause -> IF ( expr_1 . ) { body }

    )               shift and go to state 97


state 80

    (48) for_loop -> FOR ( assignment . expr_1 ; expr_1 ) { body }
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 98
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 81

    (20) assignment -> variable_or_pointer . = expr_1 ;
    (21) assignment -> variable_or_pointer . = & VARIABLE ;

    =               shift and go to state 56


state 82

    (22) return_expr -> RETURN expr_1 ; .

    TYPE            reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    IF              reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    FOR             reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    RETURN          reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    PRINTF          reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    *               reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    VARIABLE        reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    -               reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    INTEGER         reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    (               reduce using rule 22 (return_expr -> RETURN expr_1 ; .)
    }               reduce using rule 22 (return_expr -> RETURN expr_1 ; .)


state 83

    (25) printf_expr -> PRINTF ( DIGIT_STRING . , expr_1 ) ;

    ,               shift and go to state 99


state 84

    (26) printf_expr -> PRINTF ( " . FLOAT_STRING " , expr_1 ) ;

    FLOAT_STRING    shift and go to state 100


state 85

    (29) expr_1 -> expr_2 > expr_1 .

    ;               reduce using rule 29 (expr_1 -> expr_2 > expr_1 .)
    )               reduce using rule 29 (expr_1 -> expr_2 > expr_1 .)
    ,               reduce using rule 29 (expr_1 -> expr_2 > expr_1 .)
    ]               reduce using rule 29 (expr_1 -> expr_2 > expr_1 .)


state 86

    (30) expr_1 -> expr_2 < expr_1 .

    ;               reduce using rule 30 (expr_1 -> expr_2 < expr_1 .)
    )               reduce using rule 30 (expr_1 -> expr_2 < expr_1 .)
    ,               reduce using rule 30 (expr_1 -> expr_2 < expr_1 .)
    ]               reduce using rule 30 (expr_1 -> expr_2 < expr_1 .)


state 87

    (32) expr_2 -> expr_3 PLUS expr_2 .

    >               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)
    <               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)
    ;               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)
    )               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)
    ,               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)
    ]               reduce using rule 32 (expr_2 -> expr_3 PLUS expr_2 .)


state 88

    (33) expr_2 -> expr_3 - expr_2 .

    >               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)
    <               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)
    ;               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)
    )               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)
    ,               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)
    ]               reduce using rule 33 (expr_2 -> expr_3 - expr_2 .)


state 89

    (35) expr_3 -> expr_4 * expr_3 .

    PLUS            reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    -               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    >               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    <               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    ;               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    )               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    ,               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)
    ]               reduce using rule 35 (expr_3 -> expr_4 * expr_3 .)


state 90

    (36) expr_3 -> expr_4 / expr_3 .

    PLUS            reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    -               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    >               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    <               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    ;               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    )               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    ,               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)
    ]               reduce using rule 36 (expr_3 -> expr_4 / expr_3 .)


state 91

    (19) variable_list -> variable_or_pointer , variable_list .

    ;               reduce using rule 19 (variable_list -> variable_or_pointer , variable_list .)


state 92

    (49) function_call -> VARIABLE ( arguments_call ) .

    *               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    /               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    PLUS            reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    -               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    >               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    <               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    ;               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    )               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    ,               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)
    ]               reduce using rule 49 (function_call -> VARIABLE ( arguments_call ) .)


state 93

    (51) arguments_call -> expr_1 , . arguments_call
    (50) arguments_call -> . expr_1
    (51) arguments_call -> . expr_1 , arguments_call
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 74
    arguments_call                 shift and go to state 101
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 94

    (52) array -> VARIABLE [ expr_1 ] .

    *               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    /               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    PLUS            reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    -               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    >               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    <               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    ;               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    )               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    ,               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)
    ]               reduce using rule 52 (array -> VARIABLE [ expr_1 ] .)


state 95

    (20) assignment -> variable_or_pointer = expr_1 ; .

    TYPE            reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    IF              reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    FOR             reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    RETURN          reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    PRINTF          reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    *               reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    VARIABLE        reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    -               reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    INTEGER         reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    (               reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)
    }               reduce using rule 20 (assignment -> variable_or_pointer = expr_1 ; .)


state 96

    (21) assignment -> variable_or_pointer = & VARIABLE . ;

    ;               shift and go to state 102


state 97

    (47) if_clause -> IF ( expr_1 ) . { body }

    {               shift and go to state 103


state 98

    (48) for_loop -> FOR ( assignment expr_1 . ; expr_1 ) { body }

    ;               shift and go to state 104


state 99

    (25) printf_expr -> PRINTF ( DIGIT_STRING , . expr_1 ) ;
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 105
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 100

    (26) printf_expr -> PRINTF ( " FLOAT_STRING . " , expr_1 ) ;

    "               shift and go to state 106


state 101

    (51) arguments_call -> expr_1 , arguments_call .

    )               reduce using rule 51 (arguments_call -> expr_1 , arguments_call .)


state 102

    (21) assignment -> variable_or_pointer = & VARIABLE ; .

    TYPE            reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    IF              reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    FOR             reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    RETURN          reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    PRINTF          reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    *               reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    VARIABLE        reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    -               reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    INTEGER         reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    (               reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)
    }               reduce using rule 21 (assignment -> variable_or_pointer = & VARIABLE ; .)


state 103

    (47) if_clause -> IF ( expr_1 ) { . body }
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (13) line -> . for_loop
    (14) line -> . expr_line
    (15) line -> . return_expr
    (16) line -> . printf_expr
    (53) empty -> .
    (17) declaration -> . TYPE variable_list ;
    (20) assignment -> . variable_or_pointer = expr_1 ;
    (21) assignment -> . variable_or_pointer = & VARIABLE ;
    (47) if_clause -> . IF ( expr_1 ) { body }
    (48) for_loop -> . FOR ( assignment expr_1 ; expr_1 ) { body }
    (24) expr_line -> . expr_1 ;
    (22) return_expr -> . RETURN expr_1 ;
    (23) return_expr -> . RETURN ;
    (25) printf_expr -> . PRINTF ( DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> . PRINTF ( " FLOAT_STRING " , expr_1 ) ;
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    }               reduce using rule 53 (empty -> .)
    TYPE            shift and go to state 20
    IF              shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 37
    PRINTF          shift and go to state 38
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    -               shift and go to state 41
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 34
    body                           shift and go to state 107
    line                           shift and go to state 24
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    assignment                     shift and go to state 27
    if_clause                      shift and go to state 28
    for_loop                       shift and go to state 29
    expr_line                      shift and go to state 30
    return_expr                    shift and go to state 31
    printf_expr                    shift and go to state 32
    variable_or_pointer            shift and go to state 33
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 104

    (48) for_loop -> FOR ( assignment expr_1 ; . expr_1 ) { body }
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 108
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 105

    (25) printf_expr -> PRINTF ( DIGIT_STRING , expr_1 . ) ;

    )               shift and go to state 109


state 106

    (26) printf_expr -> PRINTF ( " FLOAT_STRING " . , expr_1 ) ;

    ,               shift and go to state 110


state 107

    (47) if_clause -> IF ( expr_1 ) { body . }

    }               shift and go to state 111


state 108

    (48) for_loop -> FOR ( assignment expr_1 ; expr_1 . ) { body }

    )               shift and go to state 112


state 109

    (25) printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) . ;

    ;               shift and go to state 113


state 110

    (26) printf_expr -> PRINTF ( " FLOAT_STRING " , . expr_1 ) ;
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    -               shift and go to state 41
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    expr_1                         shift and go to state 114
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    variable_or_pointer            shift and go to state 53
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 111

    (47) if_clause -> IF ( expr_1 ) { body } .

    TYPE            reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    IF              reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    FOR             reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    RETURN          reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    PRINTF          reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    *               reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    VARIABLE        reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    -               reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    INTEGER         reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    (               reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)
    }               reduce using rule 47 (if_clause -> IF ( expr_1 ) { body } .)


state 112

    (48) for_loop -> FOR ( assignment expr_1 ; expr_1 ) . { body }

    {               shift and go to state 115


state 113

    (25) printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .

    TYPE            reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    IF              reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    FOR             reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    RETURN          reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    PRINTF          reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    *               reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    VARIABLE        reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    -               reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    INTEGER         reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    (               reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)
    }               reduce using rule 25 (printf_expr -> PRINTF ( DIGIT_STRING , expr_1 ) ; .)


state 114

    (26) printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 . ) ;

    )               shift and go to state 116


state 115

    (48) for_loop -> FOR ( assignment expr_1 ; expr_1 ) { . body }
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (13) line -> . for_loop
    (14) line -> . expr_line
    (15) line -> . return_expr
    (16) line -> . printf_expr
    (53) empty -> .
    (17) declaration -> . TYPE variable_list ;
    (20) assignment -> . variable_or_pointer = expr_1 ;
    (21) assignment -> . variable_or_pointer = & VARIABLE ;
    (47) if_clause -> . IF ( expr_1 ) { body }
    (48) for_loop -> . FOR ( assignment expr_1 ; expr_1 ) { body }
    (24) expr_line -> . expr_1 ;
    (22) return_expr -> . RETURN expr_1 ;
    (23) return_expr -> . RETURN ;
    (25) printf_expr -> . PRINTF ( DIGIT_STRING , expr_1 ) ;
    (26) printf_expr -> . PRINTF ( " FLOAT_STRING " , expr_1 ) ;
    (27) variable_or_pointer -> . * VARIABLE
    (28) variable_or_pointer -> . VARIABLE
    (29) expr_1 -> . expr_2 > expr_1
    (30) expr_1 -> . expr_2 < expr_1
    (31) expr_1 -> . expr_2
    (32) expr_2 -> . expr_3 PLUS expr_2
    (33) expr_2 -> . expr_3 - expr_2
    (34) expr_2 -> . expr_3
    (35) expr_3 -> . expr_4 * expr_3
    (36) expr_3 -> . expr_4 / expr_3
    (37) expr_3 -> . expr_4
    (38) expr_4 -> . - expr_5
    (39) expr_4 -> . expr_5
    (40) expr_5 -> . variable_or_pointer INCR
    (41) expr_5 -> . expr_6
    (42) expr_6 -> . INTEGER
    (43) expr_6 -> . variable_or_pointer
    (44) expr_6 -> . function_call
    (45) expr_6 -> . array
    (46) expr_6 -> . ( expr_1 )
    (49) function_call -> . VARIABLE ( arguments_call )
    (52) array -> . VARIABLE [ expr_1 ]

    }               reduce using rule 53 (empty -> .)
    TYPE            shift and go to state 20
    IF              shift and go to state 35
    FOR             shift and go to state 36
    RETURN          shift and go to state 37
    PRINTF          shift and go to state 38
    *               shift and go to state 12
    VARIABLE        shift and go to state 21
    -               shift and go to state 41
    INTEGER         shift and go to state 45
    (               shift and go to state 22

    assignment                     shift and go to state 27
    expr_1                         shift and go to state 34
    body                           shift and go to state 117
    line                           shift and go to state 24
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    if_clause                      shift and go to state 28
    for_loop                       shift and go to state 29
    expr_line                      shift and go to state 30
    return_expr                    shift and go to state 31
    printf_expr                    shift and go to state 32
    variable_or_pointer            shift and go to state 33
    expr_2                         shift and go to state 39
    expr_3                         shift and go to state 40
    expr_4                         shift and go to state 42
    expr_5                         shift and go to state 43
    expr_6                         shift and go to state 44
    function_call                  shift and go to state 46
    array                          shift and go to state 47

state 116

    (26) printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) . ;

    ;               shift and go to state 118


state 117

    (48) for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body . }

    }               shift and go to state 119


state 118

    (26) printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .

    TYPE            reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    IF              reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    FOR             reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    RETURN          reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    PRINTF          reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    *               reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    VARIABLE        reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    -               reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    INTEGER         reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    (               reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)
    }               reduce using rule 26 (printf_expr -> PRINTF ( " FLOAT_STRING " , expr_1 ) ; .)


state 119

    (48) for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .

    TYPE            reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    IF              reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    FOR             reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    RETURN          reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    PRINTF          reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    *               reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    VARIABLE        reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    -               reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    INTEGER         reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    (               reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)
    }               reduce using rule 48 (for_loop -> FOR ( assignment expr_1 ; expr_1 ) { body } .)

