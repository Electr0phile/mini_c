Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> function_list
Rule 1     function_list -> function function_list
Rule 2     function_list -> empty
Rule 3     function -> TYPE VARIABLE ( arguments ) { body }
Rule 4     arguments -> TYPE VARIABLE
Rule 5     arguments -> TYPE VARIABLE , arguments
Rule 6     arguments -> TYPE
Rule 7     arguments -> TYPE , arguments
Rule 8     body -> line body
Rule 9     body -> empty
Rule 10    line -> declaration
Rule 11    line -> assignment
Rule 12    line -> if_clause
Rule 13    declaration -> TYPE variable_list ;
Rule 14    variable_list -> VARIABLE
Rule 15    variable_list -> VARIABLE , variable_list
Rule 16    assignment -> VARIABLE = expr_1 ;
Rule 17    expr_1 -> expr_2 > expr_1
Rule 18    expr_1 -> expr_2 < expr_1
Rule 19    expr_1 -> expr_2
Rule 20    expr_2 -> expr_3 PLUS expr_2
Rule 21    expr_2 -> expr_3 - expr_2
Rule 22    expr_2 -> expr_3
Rule 23    expr_3 -> expr_4 * expr_3
Rule 24    expr_3 -> expr_4 / expr_3
Rule 25    expr_3 -> expr_4
Rule 26    expr_4 -> - expr_5
Rule 27    expr_4 -> expr_5
Rule 28    expr_5 -> VARIABLE INCR
Rule 29    expr_5 -> expr_6
Rule 30    expr_6 -> INTEGER
Rule 31    expr_6 -> VARIABLE
Rule 32    expr_6 -> ( expr_1 )
Rule 33    if_clause -> IF ( expr_1 ) { body }
Rule 34    empty -> <empty>

Terminals, with rules where they appear

(                    : 3 32 33
)                    : 3 32 33
*                    : 23
,                    : 5 7 15
-                    : 21 26
/                    : 24
;                    : 13 16
<                    : 18
=                    : 16
>                    : 17
IF                   : 33
INCR                 : 28
INTEGER              : 30
PLUS                 : 20
TYPE                 : 3 4 5 6 7 13
VARIABLE             : 3 4 5 14 15 16 28 31
error                : 
{                    : 3 33
}                    : 3 33

Nonterminals, with rules where they appear

arguments            : 3 5 7
assignment           : 11
body                 : 3 8 33
declaration          : 10
empty                : 2 9
expr_1               : 16 17 18 32 33
expr_2               : 17 18 19 20 21
expr_3               : 20 21 22 23 24
expr_4               : 23 24 25
expr_5               : 26 27
expr_6               : 29
function             : 1
function_list        : 1 0
if_clause            : 12
line                 : 8
variable_list        : 13 15

Parsing method: LALR

state 0

    (0) S' -> . function_list
    (1) function_list -> . function function_list
    (2) function_list -> . empty
    (3) function -> . TYPE VARIABLE ( arguments ) { body }
    (34) empty -> .

    TYPE            shift and go to state 4
    $end            reduce using rule 34 (empty -> .)

    function_list                  shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> function_list .



state 2

    (1) function_list -> function . function_list
    (1) function_list -> . function function_list
    (2) function_list -> . empty
    (3) function -> . TYPE VARIABLE ( arguments ) { body }
    (34) empty -> .

    TYPE            shift and go to state 4
    $end            reduce using rule 34 (empty -> .)

    function                       shift and go to state 2
    function_list                  shift and go to state 5
    empty                          shift and go to state 3

state 3

    (2) function_list -> empty .

    $end            reduce using rule 2 (function_list -> empty .)


state 4

    (3) function -> TYPE . VARIABLE ( arguments ) { body }

    VARIABLE        shift and go to state 6


state 5

    (1) function_list -> function function_list .

    $end            reduce using rule 1 (function_list -> function function_list .)


state 6

    (3) function -> TYPE VARIABLE . ( arguments ) { body }

    (               shift and go to state 7


state 7

    (3) function -> TYPE VARIABLE ( . arguments ) { body }
    (4) arguments -> . TYPE VARIABLE
    (5) arguments -> . TYPE VARIABLE , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 9

state 8

    (4) arguments -> TYPE . VARIABLE
    (5) arguments -> TYPE . VARIABLE , arguments
    (6) arguments -> TYPE .
    (7) arguments -> TYPE . , arguments

    VARIABLE        shift and go to state 10
    )               reduce using rule 6 (arguments -> TYPE .)
    ,               shift and go to state 11


state 9

    (3) function -> TYPE VARIABLE ( arguments . ) { body }

    )               shift and go to state 12


state 10

    (4) arguments -> TYPE VARIABLE .
    (5) arguments -> TYPE VARIABLE . , arguments

    )               reduce using rule 4 (arguments -> TYPE VARIABLE .)
    ,               shift and go to state 13


state 11

    (7) arguments -> TYPE , . arguments
    (4) arguments -> . TYPE VARIABLE
    (5) arguments -> . TYPE VARIABLE , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 14

state 12

    (3) function -> TYPE VARIABLE ( arguments ) . { body }

    {               shift and go to state 15


state 13

    (5) arguments -> TYPE VARIABLE , . arguments
    (4) arguments -> . TYPE VARIABLE
    (5) arguments -> . TYPE VARIABLE , arguments
    (6) arguments -> . TYPE
    (7) arguments -> . TYPE , arguments

    TYPE            shift and go to state 8

    arguments                      shift and go to state 16

state 14

    (7) arguments -> TYPE , arguments .

    )               reduce using rule 7 (arguments -> TYPE , arguments .)


state 15

    (3) function -> TYPE VARIABLE ( arguments ) { . body }
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (34) empty -> .
    (13) declaration -> . TYPE variable_list ;
    (16) assignment -> . VARIABLE = expr_1 ;
    (33) if_clause -> . IF ( expr_1 ) { body }

    }               reduce using rule 34 (empty -> .)
    TYPE            shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 25

    body                           shift and go to state 19
    line                           shift and go to state 20
    empty                          shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    if_clause                      shift and go to state 24

state 16

    (5) arguments -> TYPE VARIABLE , arguments .

    )               reduce using rule 5 (arguments -> TYPE VARIABLE , arguments .)


state 17

    (13) declaration -> TYPE . variable_list ;
    (14) variable_list -> . VARIABLE
    (15) variable_list -> . VARIABLE , variable_list

    VARIABLE        shift and go to state 27

    variable_list                  shift and go to state 26

state 18

    (16) assignment -> VARIABLE . = expr_1 ;

    =               shift and go to state 28


state 19

    (3) function -> TYPE VARIABLE ( arguments ) { body . }

    }               shift and go to state 29


state 20

    (8) body -> line . body
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (34) empty -> .
    (13) declaration -> . TYPE variable_list ;
    (16) assignment -> . VARIABLE = expr_1 ;
    (33) if_clause -> . IF ( expr_1 ) { body }

    }               reduce using rule 34 (empty -> .)
    TYPE            shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 25

    line                           shift and go to state 20
    body                           shift and go to state 30
    empty                          shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    if_clause                      shift and go to state 24

state 21

    (9) body -> empty .

    }               reduce using rule 9 (body -> empty .)


state 22

    (10) line -> declaration .

    TYPE            reduce using rule 10 (line -> declaration .)
    VARIABLE        reduce using rule 10 (line -> declaration .)
    IF              reduce using rule 10 (line -> declaration .)
    }               reduce using rule 10 (line -> declaration .)


state 23

    (11) line -> assignment .

    TYPE            reduce using rule 11 (line -> assignment .)
    VARIABLE        reduce using rule 11 (line -> assignment .)
    IF              reduce using rule 11 (line -> assignment .)
    }               reduce using rule 11 (line -> assignment .)


state 24

    (12) line -> if_clause .

    TYPE            reduce using rule 12 (line -> if_clause .)
    VARIABLE        reduce using rule 12 (line -> if_clause .)
    IF              reduce using rule 12 (line -> if_clause .)
    }               reduce using rule 12 (line -> if_clause .)


state 25

    (33) if_clause -> IF . ( expr_1 ) { body }

    (               shift and go to state 31


state 26

    (13) declaration -> TYPE variable_list . ;

    ;               shift and go to state 32


state 27

    (14) variable_list -> VARIABLE .
    (15) variable_list -> VARIABLE . , variable_list

    ;               reduce using rule 14 (variable_list -> VARIABLE .)
    ,               shift and go to state 33


state 28

    (16) assignment -> VARIABLE = . expr_1 ;
    (17) expr_1 -> . expr_2 > expr_1
    (18) expr_1 -> . expr_2 < expr_1
    (19) expr_1 -> . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_1                         shift and go to state 35
    expr_2                         shift and go to state 36
    expr_3                         shift and go to state 37
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 29

    (3) function -> TYPE VARIABLE ( arguments ) { body } .

    TYPE            reduce using rule 3 (function -> TYPE VARIABLE ( arguments ) { body } .)
    $end            reduce using rule 3 (function -> TYPE VARIABLE ( arguments ) { body } .)


state 30

    (8) body -> line body .

    }               reduce using rule 8 (body -> line body .)


state 31

    (33) if_clause -> IF ( . expr_1 ) { body }
    (17) expr_1 -> . expr_2 > expr_1
    (18) expr_1 -> . expr_2 < expr_1
    (19) expr_1 -> . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_1                         shift and go to state 44
    expr_2                         shift and go to state 36
    expr_3                         shift and go to state 37
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 32

    (13) declaration -> TYPE variable_list ; .

    TYPE            reduce using rule 13 (declaration -> TYPE variable_list ; .)
    VARIABLE        reduce using rule 13 (declaration -> TYPE variable_list ; .)
    IF              reduce using rule 13 (declaration -> TYPE variable_list ; .)
    }               reduce using rule 13 (declaration -> TYPE variable_list ; .)


state 33

    (15) variable_list -> VARIABLE , . variable_list
    (14) variable_list -> . VARIABLE
    (15) variable_list -> . VARIABLE , variable_list

    VARIABLE        shift and go to state 27

    variable_list                  shift and go to state 45

state 34

    (28) expr_5 -> VARIABLE . INCR
    (31) expr_6 -> VARIABLE .

    INCR            shift and go to state 46
    *               reduce using rule 31 (expr_6 -> VARIABLE .)
    /               reduce using rule 31 (expr_6 -> VARIABLE .)
    PLUS            reduce using rule 31 (expr_6 -> VARIABLE .)
    -               reduce using rule 31 (expr_6 -> VARIABLE .)
    >               reduce using rule 31 (expr_6 -> VARIABLE .)
    <               reduce using rule 31 (expr_6 -> VARIABLE .)
    ;               reduce using rule 31 (expr_6 -> VARIABLE .)
    )               reduce using rule 31 (expr_6 -> VARIABLE .)


state 35

    (16) assignment -> VARIABLE = expr_1 . ;

    ;               shift and go to state 47


state 36

    (17) expr_1 -> expr_2 . > expr_1
    (18) expr_1 -> expr_2 . < expr_1
    (19) expr_1 -> expr_2 .

    >               shift and go to state 48
    <               shift and go to state 49
    ;               reduce using rule 19 (expr_1 -> expr_2 .)
    )               reduce using rule 19 (expr_1 -> expr_2 .)


state 37

    (20) expr_2 -> expr_3 . PLUS expr_2
    (21) expr_2 -> expr_3 . - expr_2
    (22) expr_2 -> expr_3 .

    PLUS            shift and go to state 50
    -               shift and go to state 51
    >               reduce using rule 22 (expr_2 -> expr_3 .)
    <               reduce using rule 22 (expr_2 -> expr_3 .)
    ;               reduce using rule 22 (expr_2 -> expr_3 .)
    )               reduce using rule 22 (expr_2 -> expr_3 .)


state 38

    (26) expr_4 -> - . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_5                         shift and go to state 52
    expr_6                         shift and go to state 41

state 39

    (23) expr_3 -> expr_4 . * expr_3
    (24) expr_3 -> expr_4 . / expr_3
    (25) expr_3 -> expr_4 .

    *               shift and go to state 53
    /               shift and go to state 54
    PLUS            reduce using rule 25 (expr_3 -> expr_4 .)
    -               reduce using rule 25 (expr_3 -> expr_4 .)
    >               reduce using rule 25 (expr_3 -> expr_4 .)
    <               reduce using rule 25 (expr_3 -> expr_4 .)
    ;               reduce using rule 25 (expr_3 -> expr_4 .)
    )               reduce using rule 25 (expr_3 -> expr_4 .)


state 40

    (27) expr_4 -> expr_5 .

    *               reduce using rule 27 (expr_4 -> expr_5 .)
    /               reduce using rule 27 (expr_4 -> expr_5 .)
    PLUS            reduce using rule 27 (expr_4 -> expr_5 .)
    -               reduce using rule 27 (expr_4 -> expr_5 .)
    >               reduce using rule 27 (expr_4 -> expr_5 .)
    <               reduce using rule 27 (expr_4 -> expr_5 .)
    ;               reduce using rule 27 (expr_4 -> expr_5 .)
    )               reduce using rule 27 (expr_4 -> expr_5 .)


state 41

    (29) expr_5 -> expr_6 .

    *               reduce using rule 29 (expr_5 -> expr_6 .)
    /               reduce using rule 29 (expr_5 -> expr_6 .)
    PLUS            reduce using rule 29 (expr_5 -> expr_6 .)
    -               reduce using rule 29 (expr_5 -> expr_6 .)
    >               reduce using rule 29 (expr_5 -> expr_6 .)
    <               reduce using rule 29 (expr_5 -> expr_6 .)
    ;               reduce using rule 29 (expr_5 -> expr_6 .)
    )               reduce using rule 29 (expr_5 -> expr_6 .)


state 42

    (30) expr_6 -> INTEGER .

    *               reduce using rule 30 (expr_6 -> INTEGER .)
    /               reduce using rule 30 (expr_6 -> INTEGER .)
    PLUS            reduce using rule 30 (expr_6 -> INTEGER .)
    -               reduce using rule 30 (expr_6 -> INTEGER .)
    >               reduce using rule 30 (expr_6 -> INTEGER .)
    <               reduce using rule 30 (expr_6 -> INTEGER .)
    ;               reduce using rule 30 (expr_6 -> INTEGER .)
    )               reduce using rule 30 (expr_6 -> INTEGER .)


state 43

    (32) expr_6 -> ( . expr_1 )
    (17) expr_1 -> . expr_2 > expr_1
    (18) expr_1 -> . expr_2 < expr_1
    (19) expr_1 -> . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_1                         shift and go to state 55
    expr_2                         shift and go to state 36
    expr_3                         shift and go to state 37
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 44

    (33) if_clause -> IF ( expr_1 . ) { body }

    )               shift and go to state 56


state 45

    (15) variable_list -> VARIABLE , variable_list .

    ;               reduce using rule 15 (variable_list -> VARIABLE , variable_list .)


state 46

    (28) expr_5 -> VARIABLE INCR .

    *               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    /               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    PLUS            reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    -               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    >               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    <               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    ;               reduce using rule 28 (expr_5 -> VARIABLE INCR .)
    )               reduce using rule 28 (expr_5 -> VARIABLE INCR .)


state 47

    (16) assignment -> VARIABLE = expr_1 ; .

    TYPE            reduce using rule 16 (assignment -> VARIABLE = expr_1 ; .)
    VARIABLE        reduce using rule 16 (assignment -> VARIABLE = expr_1 ; .)
    IF              reduce using rule 16 (assignment -> VARIABLE = expr_1 ; .)
    }               reduce using rule 16 (assignment -> VARIABLE = expr_1 ; .)


state 48

    (17) expr_1 -> expr_2 > . expr_1
    (17) expr_1 -> . expr_2 > expr_1
    (18) expr_1 -> . expr_2 < expr_1
    (19) expr_1 -> . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_2                         shift and go to state 36
    expr_1                         shift and go to state 57
    expr_3                         shift and go to state 37
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 49

    (18) expr_1 -> expr_2 < . expr_1
    (17) expr_1 -> . expr_2 > expr_1
    (18) expr_1 -> . expr_2 < expr_1
    (19) expr_1 -> . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_2                         shift and go to state 36
    expr_1                         shift and go to state 58
    expr_3                         shift and go to state 37
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 50

    (20) expr_2 -> expr_3 PLUS . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_3                         shift and go to state 37
    expr_2                         shift and go to state 59
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 51

    (21) expr_2 -> expr_3 - . expr_2
    (20) expr_2 -> . expr_3 PLUS expr_2
    (21) expr_2 -> . expr_3 - expr_2
    (22) expr_2 -> . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_3                         shift and go to state 37
    expr_2                         shift and go to state 60
    expr_4                         shift and go to state 39
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 52

    (26) expr_4 -> - expr_5 .

    *               reduce using rule 26 (expr_4 -> - expr_5 .)
    /               reduce using rule 26 (expr_4 -> - expr_5 .)
    PLUS            reduce using rule 26 (expr_4 -> - expr_5 .)
    -               reduce using rule 26 (expr_4 -> - expr_5 .)
    >               reduce using rule 26 (expr_4 -> - expr_5 .)
    <               reduce using rule 26 (expr_4 -> - expr_5 .)
    ;               reduce using rule 26 (expr_4 -> - expr_5 .)
    )               reduce using rule 26 (expr_4 -> - expr_5 .)


state 53

    (23) expr_3 -> expr_4 * . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_4                         shift and go to state 39
    expr_3                         shift and go to state 61
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 54

    (24) expr_3 -> expr_4 / . expr_3
    (23) expr_3 -> . expr_4 * expr_3
    (24) expr_3 -> . expr_4 / expr_3
    (25) expr_3 -> . expr_4
    (26) expr_4 -> . - expr_5
    (27) expr_4 -> . expr_5
    (28) expr_5 -> . VARIABLE INCR
    (29) expr_5 -> . expr_6
    (30) expr_6 -> . INTEGER
    (31) expr_6 -> . VARIABLE
    (32) expr_6 -> . ( expr_1 )

    -               shift and go to state 38
    VARIABLE        shift and go to state 34
    INTEGER         shift and go to state 42
    (               shift and go to state 43

    expr_4                         shift and go to state 39
    expr_3                         shift and go to state 62
    expr_5                         shift and go to state 40
    expr_6                         shift and go to state 41

state 55

    (32) expr_6 -> ( expr_1 . )

    )               shift and go to state 63


state 56

    (33) if_clause -> IF ( expr_1 ) . { body }

    {               shift and go to state 64


state 57

    (17) expr_1 -> expr_2 > expr_1 .

    ;               reduce using rule 17 (expr_1 -> expr_2 > expr_1 .)
    )               reduce using rule 17 (expr_1 -> expr_2 > expr_1 .)


state 58

    (18) expr_1 -> expr_2 < expr_1 .

    ;               reduce using rule 18 (expr_1 -> expr_2 < expr_1 .)
    )               reduce using rule 18 (expr_1 -> expr_2 < expr_1 .)


state 59

    (20) expr_2 -> expr_3 PLUS expr_2 .

    >               reduce using rule 20 (expr_2 -> expr_3 PLUS expr_2 .)
    <               reduce using rule 20 (expr_2 -> expr_3 PLUS expr_2 .)
    ;               reduce using rule 20 (expr_2 -> expr_3 PLUS expr_2 .)
    )               reduce using rule 20 (expr_2 -> expr_3 PLUS expr_2 .)


state 60

    (21) expr_2 -> expr_3 - expr_2 .

    >               reduce using rule 21 (expr_2 -> expr_3 - expr_2 .)
    <               reduce using rule 21 (expr_2 -> expr_3 - expr_2 .)
    ;               reduce using rule 21 (expr_2 -> expr_3 - expr_2 .)
    )               reduce using rule 21 (expr_2 -> expr_3 - expr_2 .)


state 61

    (23) expr_3 -> expr_4 * expr_3 .

    PLUS            reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)
    -               reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)
    >               reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)
    <               reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)
    ;               reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)
    )               reduce using rule 23 (expr_3 -> expr_4 * expr_3 .)


state 62

    (24) expr_3 -> expr_4 / expr_3 .

    PLUS            reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)
    -               reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)
    >               reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)
    <               reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)
    ;               reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)
    )               reduce using rule 24 (expr_3 -> expr_4 / expr_3 .)


state 63

    (32) expr_6 -> ( expr_1 ) .

    *               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    /               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    PLUS            reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    -               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    >               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    <               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    ;               reduce using rule 32 (expr_6 -> ( expr_1 ) .)
    )               reduce using rule 32 (expr_6 -> ( expr_1 ) .)


state 64

    (33) if_clause -> IF ( expr_1 ) { . body }
    (8) body -> . line body
    (9) body -> . empty
    (10) line -> . declaration
    (11) line -> . assignment
    (12) line -> . if_clause
    (34) empty -> .
    (13) declaration -> . TYPE variable_list ;
    (16) assignment -> . VARIABLE = expr_1 ;
    (33) if_clause -> . IF ( expr_1 ) { body }

    }               reduce using rule 34 (empty -> .)
    TYPE            shift and go to state 17
    VARIABLE        shift and go to state 18
    IF              shift and go to state 25

    body                           shift and go to state 65
    line                           shift and go to state 20
    empty                          shift and go to state 21
    declaration                    shift and go to state 22
    assignment                     shift and go to state 23
    if_clause                      shift and go to state 24

state 65

    (33) if_clause -> IF ( expr_1 ) { body . }

    }               shift and go to state 66


state 66

    (33) if_clause -> IF ( expr_1 ) { body } .

    TYPE            reduce using rule 33 (if_clause -> IF ( expr_1 ) { body } .)
    VARIABLE        reduce using rule 33 (if_clause -> IF ( expr_1 ) { body } .)
    IF              reduce using rule 33 (if_clause -> IF ( expr_1 ) { body } .)
    }               reduce using rule 33 (if_clause -> IF ( expr_1 ) { body } .)

